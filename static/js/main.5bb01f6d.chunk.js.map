{"version":3,"sources":["components/Login.js","pages/Home.js","pages/Dashboard.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Login","responseFacebook","response","status","props","handleSuccessfulAuth","console","log","componentClicked","appId","autoLoad","fields","onClick","this","callback","Component","Home","bind","data","handleLogin","history","push","className","Dashboard","isLoggedIn","Container","Row","Col","md","src","user","picture","url","alt","name","renderDashboard","Main","state","isLoading","setState","exact","path","render","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8VAGqBA,E,2MAEjBC,iBAAmB,SAAAC,GAEO,WAAnBA,EAASC,OACR,EAAKC,MAAMC,qBAAqBH,GAEhCI,QAAQC,IAAI,qB,EAIpBC,iBAAmB,kBAAMF,QAAQC,IAAI,Y,wEAGjC,OACI,6BACI,kBAAC,IAAD,CACAE,MAAM,kBACNC,UAAU,EACVC,OAAO,uCACPC,QAASC,KAAKL,iBACdM,SAAUD,KAAKZ,wB,GArBIc,aCAdC,E,YACjB,WAAYZ,GAAQ,IAAD,8BACf,4CAAMA,KAEDC,qBAAuB,EAAKA,qBAAqBY,KAA1B,gBAHb,E,kFAMEC,GACjBL,KAAKT,MAAMe,YAAYD,GACvBL,KAAKT,MAAMgB,QAAQC,KAAK,gB,+BAIxB,OACI,yBAAKC,UAAU,cACX,wBAAIA,UAAU,aAAd,oBACA,kBAAC,EAAD,CAAOjB,qBAAsBQ,KAAKR,4B,GAhBhBU,a,wBCmCnBQ,EAnCG,SAAAnB,GA4Bd,OACI,6BA3BJ,WACI,GAAuB,iBAApBA,EAAMoB,WAIL,OACI,6BACI,yBAAKF,UAAU,oBACX,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACL,yBAAKN,UAAU,4BACX,yBAAKA,UAAU,UACX,yBAAKO,IAAKzB,EAAM0B,KAAKC,QAAQb,KAAKc,IAAKC,IAAK7B,EAAM0B,KAAKI,QAE3D,4BAAI,gCAAS9B,EAAM0B,KAAKI,aAZpD9B,EAAMgB,QAAQC,KAAK,KAyBlBc,KC1BQC,E,YACjB,WAAYhC,GAAQ,IAAD,8BACf,4CAAMA,KACDiC,MAAQ,CACTb,WAAY,gBACZc,WAAW,EACXR,KAAM,IAGV,EAAKX,YAAc,EAAKA,YAAYF,KAAjB,gBARJ,E,yEAWPC,GACRL,KAAK0B,SAAS,CACVf,WAAY,YACZM,KAAMZ,IAGVZ,QAAQC,IAAIM,KAAKwB,MAAMb,c,+BAGjB,IAAD,OACL,OACI,yBAAKF,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACAkB,OAAK,EAACC,KAAK,IACXC,OAAQ,SAAAtC,GAAK,OACT,kBAAC,EAAD,iBAAUA,EAAV,CAAiBe,YAAa,EAAKA,YAAaK,WAAY,EAAKa,MAAMb,iBAG3E,kBAAC,IAAD,CACAiB,KAAK,aACLC,OAAQ,SAAAtC,GAAK,OACT,kBAAC,EAAD,iBAAeA,EAAf,CAAsB0B,KAAM,EAAKO,MAAMP,KAAMN,WAAY,EAAKa,MAAMb,wB,GAnC9DT,aCInB4B,MANf,WACE,OACM,kBAAC,EAAD,OCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OAAO,kBAAC,EAAD,MAASQ,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5bb01f6d.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport FacebookLogin from 'react-facebook-login';\r\n\r\nexport default class Login extends Component {\r\n\r\n    responseFacebook = response => {\r\n        // Wrap in conditional if there was an error with response data\r\n        if(response.status != 'unknown') {\r\n            this.props.handleSuccessfulAuth(response);\r\n        } else {\r\n            console.log('ERROR SIGNING IN');\r\n        }\r\n    }\r\n\r\n    componentClicked = () => console.log(\"clicked\");\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FacebookLogin\r\n                appId=\"222393578753669\"\r\n                autoLoad={true}\r\n                fields=\"name,email,picture.width(250),gender\"\r\n                onClick={this.componentClicked}\r\n                callback={this.responseFacebook} \r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Login from '../components/Login';\r\n\r\nexport default class Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleSuccessfulAuth = this.handleSuccessfulAuth.bind(this);\r\n    }\r\n\r\n    handleSuccessfulAuth(data) {\r\n        this.props.handleLogin(data);\r\n        this.props.history.push('/dashboard');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='App-header'>\r\n                <h1 className='App-title'>Social Butterfly</h1>\r\n                <Login handleSuccessfulAuth={this.handleSuccessfulAuth} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\n\r\nconst Dashboard = props => {\r\n\r\n    function renderDashboard() {\r\n        if(props.isLoggedIn == 'NOT_LOGGED_IN') {\r\n            // Goes back to home\r\n            props.history.push('/');\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <div className='dashboard-header'>\r\n                        <Container>\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <div className='dashboard-header-content'>\r\n                                        <div className='avatar'>\r\n                                            <img src={props.user.picture.data.url} alt={props.user.name}/>\r\n                                        </div>\r\n                                        <h2><strong>{props.user.name}</strong></h2>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {renderDashboard()}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboard","import React, { Component } from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport ReactLoading from 'react-loading';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport Home from \"../pages/Home\";\r\nimport Dashboard from \"../pages/Dashboard\";\r\n\r\nexport default class Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoggedIn: 'NOT_LOGGED_IN',\r\n            isLoading: true,\r\n            user: {}\r\n        }\r\n\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n    }\r\n\r\n    handleLogin(data) {\r\n        this.setState({\r\n            isLoggedIn: 'LOGGED_IN',\r\n            user: data\r\n        });\r\n\r\n        console.log(this.state.isLoggedIn);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='App'>\r\n                <BrowserRouter>\r\n                    <Switch>\r\n                        <Route \r\n                        exact path=\"/\" \r\n                        render={props => (\r\n                            <Home {...props} handleLogin={this.handleLogin} isLoggedIn={this.state.isLoggedIn} />\r\n                        )}\r\n                        />\r\n                        <Route \r\n                        path=\"/dashboard\" \r\n                        render={props => (\r\n                            <Dashboard {...props} user={this.state.user} isLoggedIn={this.state.isLoggedIn} />\r\n                        )} \r\n                        />\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n        <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}